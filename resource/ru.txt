Язык программирования Rust
Установка
Изучить
Песочница
Инструменты
Управление
Сообщество
Блог
Язык
English (en-US)
Español (es)
Français (fr)
Italiano (it)
日本語 (ja)
Português (pt-BR)
Русский (ru)
Türkçe (tr)
简体中文 (zh-CN)
正體中文 (zh-TW)
Rust
Язык, позволяющий каждому  создавать надёжное и эффективное программное обеспечение
Начало
Версия 1.75.0
Почему Rust?
Производительность
Rust невероятно быстр и эффективен по использованию памяти: без рантайма или сборщика мусора он может обеспечить работу критичных для производительности сервисов, запускаться на встраиваемых устройствах и легко интегрироваться с другими языками.
Надёжность
Богатая система типов Rust и модель владения гарантируют потокобезопасность и безопасность памяти, и позволяют устранить множество классов ошибок во время компиляции.
Продуктивность
У Rust отличная документация, дружественный компилятор с полезными сообщениями об ошибках и первоклассный инструментарий — интегрированный пакетный менеджер и инструмент сборки, умная мультиредакторная поддержка с автокомплитом, проверками типов, автоформатированием и многим другим.
Создайте это в Rust
В 2018 году, сообщество Rust приняло решение расширить присутствие языка для нескольких областей (смотрите roadmap на 2018 год). Для этого вы можете найти множество высококачественных пакетов и потрясающие руководства о том, как начать.
Командная строка
Быстро создайте инструмент командной строки с помощью надёжной экосистемы Rust. Rust поможет вам с уверенностью поддерживать ваше приложение и с лёгкостью его распространять.
Инструменты сборки
WebAssembly
Используйте Rust для перезарядки вашего JavaScript, по одному модулю за раз. Опубликуйте в npm, упакуйте с webpack и вы готовы к соревнованиям.
Написание web-приложений
Сетевое программирование
Предсказуемая производительность. Крошечные требования к ресурсам. Потрясающая надёжность. Rust отлично подходит для сетевых сервисов.
Работа на сервере
Встраиваемые системы
Ориентируетесь на устройства с малой производительностью?
Нужен низкоуровневый контроль без отказа от высокоуровневых удобств?
Rust предоставит это.
Начать с Embedded
Промышленное использование Rust
Сотни компаний по всему миру используют Rust в реальных проектах для быстрых кросс-платформенных решений с ограниченными ресурсами. Такие проекты, как Firefox, Dropbox и Cloudflare, используют Rust. Rust отлично подходит как для стартапов, так и для больших компаний, как для встраиваемых устройств, так и для масштабируемых web-сервисов.
Мой самый большой комплимент Rust — то, что он скучный, и это потрясающий комплимент.
– Chris Dickinson, инженер npm, Inc
Вся документация, инструментарий и сообщество замечательны - у вас есть всё, чтобы преуспеть в написании кода на Rust.
– Antonio Verardi, инженер по инфраструктуре
Узнать больше
Примите участие
Читай про Rust
Мы любим документацию! Посмотрите книги, доступные онлайн, а также ключевые блоги и пользовательские руководства.
Читать книгу
Смотрите про Rust
У Rust сообщества есть отдельный канал на YouTube, где собрано огромное количество презентаций и учебных пособий.
Смотреть видео
Сделать вклад
Rust - действительно работа сообщества, и мы приветствуем вклад как любителей, так и тех, кто использует его в промышленной разработке, от новичков, до профессионалов. Помогите нам улучшить опыт работы с Rust!
Читать руководство
Благодарности
Rust не существовал бы без щедрого вклада времени, работы и ресурсов от отдельных лиц и компаний. Мы очень благодарны за поддержку!
Отдельные участники
Rust - это проект сообщества, и он очень благодарен за многочисленные вклады сообщества, которые он получает.
Посмотреть отдельных участников
Корпоративные спонсоры
Проект Rust получает поддержку от компаний через пожертвования для инфраструктуры.
Посмотреть спонсоров
Получить помощь!
Документация
Rust Forge (Документация для контрибьюторов)
Задать вопрос на пользовательском форуме
Язык
English (en-US)
Español (es)
Français (fr)
Italiano (it)
日本語 (ja)
Português (pt-BR)
Русский (ru)
Türkçe (tr)
简体中文 (zh-CN)
正體中文 (zh-TW)
Условия и политики
Правила поведения
Лицензии
Руководство по политике в отношении логотипов и СМИ
Отчёты об уязвимостях
Уведомление о конфиденциальности
Все политики
Социальные сети
Поддерживается Rust Team. Увидели опечатку? Исправьте здесь!
Ищете предыдущий сайт?
Установка Rust - Язык программирования Rust
Rust
Установка
Изучить
Песочница
Инструменты
Управление
Сообщество
Блог
Язык
English (en-US)
Español (es)
Français (fr)
Italiano (it)
日本語 (ja)
Português (pt-BR)
Русский (ru)
Türkçe (tr)
简体中文 (zh-CN)
正體中文 (zh-TW)
Установка Rust
Используя rustup (рекомендуется)
Кажется у вас запущена macOS, Linux или другая Unix-подобная ОС. Для загрузки Rustup и установки Rust, запустите следующее в вашем терминале и следуйте инструкциям на экране.
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
Похоже, вы работаете под управлением Windows. Чтобы начать использовать Rust, загрузите установщик, затем запустите программу и следуйте инструкциям на экране. Возможно, Вам потребуется установитьVisual Studio C++ Build tools при появлении соответствующего запроса. Если вы не работаете в Windows, смотрите "другие методы установки".
Загрузить rustup-init.exe (32-bit)
Загрузить rustup-init.exe (64-bit)
Windows Subsystem for Linux
Если вы используете Windows Subsystem for Linux, для установки Rust запустите следующее в вашем терминале и затем следуйте инструкциям на экране.
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
Rust запускается на Windows, Linux, macOS, FreeBSD и NetBSD. Если вы используете одну из этих платформ и видите это, то пожалуйста, сообщите о проблеме и следующих значениях:
navigator.platform:
MacIntel
navigator.appVersion:
5.0 (Macintosh)
Сообщить о проблеме
Если вы используете Unix, то для установки Rustзапустите в терминале следующую команду и следуйте инструкциям на экране.
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
Если у вас запущен Windows,скачайте и запустите rustup‑init.exe и затем следуйте инструкциям на экране.
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
Если у вас запущен Windows,скачайте и запустите rustup‑init.exe, а затем следуйте инструкциям на экране.
Примечания об установке Rust
Начало работы
Если вы только начали работать с Rust и хотите более глубокого погружения, посмотрите страницу о начале работы.
Особенности Windows
На Windows, Rust дополнительно требует инструменты сборки C++ для Visual Studio 2013 или более поздней версии. Самый простой способ получить эти инструменты - это установка
Microsoft Visual C++ Build Tools 2019
, которая предоставляет только инструменты сборки Visual C++. В качестве альтернативы этому способу, вы можете установить
Visual Studio 2019, Visual Studio 2017, Visual Studio 2015 или Visual
Studio 2013 и в процессе установки выбрать "C++ tools".
Для получения дополнительной информации о настройке Rust в Windows, смотрите
Windows-специфичную документацию rustup.
Управление инструментами с rustup
Rust устанавливается и управляется при помощи
rustup. Rust имеет 6-недельный
процесс выпуска
и поддерживает
большое количество платформ, так что большое количество сборок Rust доступно в любое время. rustup согласованно управляет этими сборками на каждой платформе, поддерживаемой Rust, включая установку Rust
из beta и nightly каналов выпусков, а также поддерживает дополнительные цели для кросс-компиляции.
Если вы ранее устанавливали rustup, то вы можете обновить инструменты разработчика запустив rustup update.
Для дополнительной информации смотрите
документацию по rustup.
Настройка переменной окружения PATH
В среде разработки Rust, все инструменты устанавливаются в директорию
~/.cargo/bin
%USERPROFILE%\.cargo\bin
, где вы можете найти набор инструментов Rust,
включая rustc, cargo и rustup.
Соответственно, разработчики на Rust обычно включают её в
переменную окружения
PATH. В процессе установки
rustup пытается сконфигурировать PATH.
Из-за разницы между платформами, командными оболочками и багами в
rustup, изменение PATH может не принести
результата до тех пор, пока консоль не будет перезапущена или пользователь не перезайдёт в систему, а может и не удастся вообще.
Если после установки запуск команды rustc --version в консоли
терпит неудачу, это может быть наиболее вероятной причиной.
Удалить Rust
Если вы по какой-то причине хотите удалить Rust, вы можете запустить
rustup self uninstall.
Нам будет тебя не хватать!
Другие методы установки
Для большинства разработчиков, процесс установки, при помощи rustup, описанный выше, является предпочтительным способом установки Rust. Однако, Rust также может быть установлен при помощи других методов.
Узнайте больше
Получить помощь!
Документация
Rust Forge (Документация для контрибьюторов)
Задать вопрос на пользовательском форуме
Язык
English (en-US)
Español (es)
Français (fr)
Italiano (it)
日本語 (ja)
Português (pt-BR)
Русский (ru)
Türkçe (tr)
简体中文 (zh-CN)
正體中文 (zh-TW)
Условия и политики
Правила поведения
Лицензии
Руководство по политике в отношении логотипов и СМИ
Отчёты об уязвимостях
Уведомление о конфиденциальности
Все политики
Социальные сети
Поддерживается Rust Team. Увидели опечатку? Исправьте здесь!
Ищете предыдущий сайт?
Изучить Rust - Язык программирования Rust
Rust
Установка
Изучить
Песочница
Инструменты
Управление
Сообщество
Блог
Язык
English (en-US)
Español (es)
Français (fr)
Italiano (it)
日本語 (ja)
Português (pt-BR)
Русский (ru)
Türkçe (tr)
简体中文 (zh-CN)
正體中文 (zh-TW)
Изучить Rust
С чего начать?
"The Rust Programming Language", ласково называемая "книгой", даст вам обзор языка начиная с базовых принципов. По ходу чтения вы создадите несколько проектов и к концу изучения получите твёрдое понимание языка.
Читать книгу!
Другой вариант, Rustlings, поможет вам в установке и настройке инструментов Rust, и обучит вас основам чтения и написания кода на Rust. Это альтернатива книге "Rust на примерах", которая работает с вашим собственным окружением.
Пройдите курс Rustlings!
Если чтение сотен страниц о языке — не ваш стиль, то вам стоит взглянуть на "Rust на примерах" ("Rust By Example", RBE). Пока "Книга" большим количеством слов рассуждает о коде, RBE показывает куски кода и сводит рассуждения к минимуму. Также она содержит упражнения!
Перейти в Rust by Example!
Совершенствуйтесь с Rust
Прочитайте основную документацию
Вся документация также доступна локально. Команда rustup doc откроет её в вашем браузере даже без сети!
Стандартная библиотека
Полное руководство по API стандартной библиотеки.
Руководство по редакциям языка
Руководство по редакциям Rust.
Книга по Cargo
Книга о пакетном менеджере и системе сборки Rust.
Книга по rustdoc
Узнайте как создать удивительную документацию для вашего проекта.
Книга по rustc
Познакомьтесь с опциями, доступными в компиляторе Rust.
Руководство по ошибкам компилятора
Подробные объяснения ошибок, которые вы можете получить от компилятора.
Развивайте свои навыки в прикладной сфере
Книга о консольных приложениях
Изучите как писать эффективные консольные приложения на Rust.
Книга по WebAssembly
Используйте Rust для создания нативных браузерных библиотек с помощью WebAssembly.
Книга Embedded
Станьте опытным разработчиком под микроконтроллеры и другие встраиваемые системы с Rust.
Мастер Rust
Интересно узнать о самых тёмных уголках языка? Здесь вы можете докопаться до мелочей:
Reference не является формальной спецификацией, но она более детализирована и комплексна, чем книга.
Читать Reference
Rustonomicon - это ваш путеводитель в тёмное искусство небезопасного Rust. Иногда его называют "’nomicon".
Читать ’nomicon
Unstable Book содержит документацию о нестабильных возможностях, которые вы можете использовать только в ночной версии Rust.
Читать Unstable Book
Получить помощь!
Документация
Rust Forge (Документация для контрибьюторов)
Задать вопрос на пользовательском форуме
Язык
English (en-US)
Español (es)
Français (fr)
Italiano (it)
日本語 (ja)
Português (pt-BR)
Русский (ru)
Türkçe (tr)
简体中文 (zh-CN)
正體中文 (zh-TW)
Условия и политики
Правила поведения
Лицензии
Руководство по политике в отношении логотипов и СМИ
Отчёты об уязвимостях
Уведомление о конфиденциальности
Все политики
Социальные сети
Поддерживается Rust Team. Увидели опечатку? Исправьте здесь!
Ищете предыдущий сайт?
Инструменты - Язык программирования Rust
Rust
Установка
Изучить
Песочница
Инструменты
Управление
Сообщество
Блог
Язык
English (en-US)
Español (es)
Français (fr)
Italiano (it)
日本語 (ja)
Português (pt-BR)
Русский (ru)
Türkçe (tr)
简体中文 (zh-CN)
正體中文 (zh-TW)
Инструменты
Поддержка первоклассных редакторов
Не зависимо от того, предпочитаете ли вы работать с кодом из командной строки или использовать богатые возможности графического редактора, для этого инструмента существует поддержка Rust. Или вы можете создать свой собственный, используя rust-analyzer.
VS Code
Sublime Text
RustRover
Eclipse
Vim
Emacs
Visual Studio
Принесите спокойствие в ваши сборки
Cargo - это инструмент сборки для Rust. Он собирает все общие действия в одну команду. Шаблонность не нужна.
Установка
С десятками тысяч пакетов, есть неплохой шанс, что crates.io содержит решение, которое вы ищете. Встаньте на плечи гигантов и двигайте свою команду от повторения к инновациям.
Тестирование
Станьте уверенным в своём коде благодаря превосходным инструментам тестирования Rust. cargo test - унифицированное решение для тестирования в Rust. Пишете ли вы тесты после вашего кода или в отдельном файле, cargo test предоставляет решение для всех нужд тестирования.
Развёртывание
cargo build создаёт бинарные файлы для всех платформ. С этой простой командой ваш код может компилироваться для Windows, Linux, macOS и интернета. Всё это делается с помощью современного интерфейса, без необходимости в скриптах сборки.
Скорость за счёт автоматизации
Промышленные инструменты Rust делают сотрудничество безбоязненным, позволяя командам сосредоточиться на действительно важных задачах.
Rustfmt
Rustfmt автоматически форматирует Rust код, облегчая его чтение, написание и поддержку. И что более важно: теперь не надо спорить о местоположении пробелов и скобок.
Перейти в репозиторий
Clippy
"Похоже, что вы пишете Iterator"Clippy помогает разработчикам всех уровней опыта писать идиоматический код и обеспечивает соблюдение стандартов.
Перейти в репозиторий
Cargo Doc
С помощью конструктора документации Cargo, все API будут задокументированы. Документация доступна локально при помощи cargo doc и онлайн для публичных пакетов на docs.rs.
Перейти на сайт
Получить помощь!
Документация
Rust Forge (Документация для контрибьюторов)
Задать вопрос на пользовательском форуме
Язык
English (en-US)
Español (es)
Français (fr)
Italiano (it)
日本語 (ja)
Português (pt-BR)
Русский (ru)
Türkçe (tr)
简体中文 (zh-CN)
正體中文 (zh-TW)
Условия и политики
Правила поведения
Лицензии
Руководство по политике в отношении логотипов и СМИ
Отчёты об уязвимостях
Уведомление о конфиденциальности
Все политики
Социальные сети
Поддерживается Rust Team. Увидели опечатку? Исправьте здесь!
Ищете предыдущий сайт?
Управление - Язык программирования Rust
Rust
Установка
Изучить
Песочница
Инструменты
Управление
Сообщество
Блог
Язык
English (en-US)
Español (es)
Français (fr)
Italiano (it)
日本語 (ja)
Português (pt-BR)
Русский (ru)
Türkçe (tr)
简体中文 (zh-CN)
正體中文 (zh-TW)
Управление
Как Rust создаётся его сообществом
Дорожная карта и процесс RFC
Каждое важное решение в Rust начинается с Request for Comments (RFC). Приглашаем всех обсудить предложение и работать над общим пониманием всех компромиссов. Не смотря на то, что временами это трудно, такое обсуждение сообществом является секретным соусом Rust, повышающим его качество.
Узнать больше
Команды
Leadership council
Charged with the success of the Rust Project as whole, consisting of representatives from top-level teams
Участники и контакты
Compiler team
Внутренности компилятора, оптимизации
Участники и контакты
Crates.io team
Операционное управление, разработка и политика crates.io.
Участники и контакты
Команда инструментов разработчика
Инструменты разработчика
Участники и контакты
Infrastructure team
Поддержка инфраструктуры проекта Rust: CI, выпуски, боты, метрики
Участники и контакты
Language team
Дизайн новых языковых возможностей
Участники и контакты
Library team
Поддержка стандартной библиотеки, rust-lang пакетов, конвенций и экосистемы
Участники и контакты
Moderation team
Помогают соблюдать кодекс поведения
Участники и контакты
Рабочие группы
Async working group
Pursuing core language and library support for async-await
Участники и контакты
Command-line interfaces (CLI) working group
Направлена на сквозной опыт написания больших и маленьких консольных приложения на Rust.
Участники и контакты
Embedded devices working group
Сосредоточение на сквозном опыте использования Rust на окружениях с ограниченными ресурсами и нетрадиционных платформах.
Участники и контакты
Game development working group
Сосредотачивает внимание на том, чтобы сделать Rust выбором по умолчанию для разработки игр.
Участники и контакты
Rust by Example working group
Maintaining and updating the official Rust by Example book
Участники и контакты
Secure Code WG
Упрощение написания безопасного кода на Rust
Участники и контакты
Security Response WG
Сортируют и реагируют на входящие отчёты об уязвимостях
Участники и контакты
Triage Working Group
Triage repositories under rust-lang organisation
Участники и контакты
WebAssembly (WASM) working group
Направлена на сквозной опыт встраивания кода на Rust в библиотеки и приложения на JS при помощи WebAssembly.
Участники и контакты
Получить помощь!
Документация
Rust Forge (Документация для контрибьюторов)
Задать вопрос на пользовательском форуме
Язык
English (en-US)
Español (es)
Français (fr)
Italiano (it)
日本語 (ja)
Português (pt-BR)
Русский (ru)
Türkçe (tr)
简体中文 (zh-CN)
正體中文 (zh-TW)
Условия и политики
Правила поведения
Лицензии
Руководство по политике в отношении логотипов и СМИ
Отчёты об уязвимостях
Уведомление о конфиденциальности
Все политики
Социальные сети
Поддерживается Rust Team. Увидели опечатку? Исправьте здесь!
Ищете предыдущий сайт?
Сообщество - Язык программирования Rust
Rust
Установка
Изучить
Песочница
Инструменты
Управление
Сообщество
Блог
Язык
English (en-US)
Español (es)
Français (fr)
Italiano (it)
日本語 (ja)
Português (pt-BR)
Русский (ru)
Türkçe (tr)
简体中文 (zh-CN)
正體中文 (zh-TW)
Сообщество
Где поговорить
Форум пользователей
Пользовательский форум Rust - это место, где пользователи Rust могут общаться обо всём, что относится к Rust. Здесь вы можете задавать вопросы, согласовывать идеи проектов и многое другое!
Посетить форум
Форум internals
Форум Rust Internals - это место, где можно подискутировать о разработке самого Rust – включая работу над компилятором, дизайном языка и стандартной библиотеки.
Посетить форум
Чат-платформы
Разработка Rust и общение происходит на нескольких чат-платформах. Посмотрите общие и другие каналы на Discord сервере Rust или посетите страницу команд, чтобы узнать где проводят встречи конкретные команды.
Discord
Zulip
Узнать больше о командах
Посетить форум
Посетить форум
Discord
Zulip
Узнать больше о командах
Где учиться
Читай о Rust
Язык программирования Rust имеет много качеств, но наибольшая сила Rust - сообщество людей, которые собираются вместе, чтобы сделать работу с Rust полезным опытом.
Будьте в курсе с сообществом Rust!
This Week in Rust
Будь в контакте с сообществом
Мы рады слышать вас! Не знаете где или кому задать вопрос? Хотите принять участие, но не знаете как? Команда сообщества свяжет вас с тем, кто может помочь!
email community@rust-lang.org
This Week in Rust
email community@rust-lang.org
Мероприятия
Найти встречу или конференцию
Более чем в 35 странах проводится более 90 митапов и несколько конференций. Rustaceans периодически встречаются в Rust User Group. Они являются отличным местом для входа в сообщество и отличным способом учиться и общаться с другими людьми со схожими интересами. Встречи обычно неформальные и открыты для всех.
Посмотреть календарь
Программа конференций на 2020 год
Запустите своё мероприятие
С ростом Rust, мы готовы помочь начать организовывать локальные мероприятия.
Rust Events Team готова помочь вам с организацией от обучающих до хардкорных конференций и митапов.
Регистрация вашего мероприятия помогает нам отслеживать наши усилия в сообществе
и позволяет нам связать вас со спикерами или другими участниками в вашем регионе.
Посмотрите репозиторий Events Team
Зарегистрировать событие
Rustbridge
RustBridge - это семинар для изучения Rust и входа в сообщество, ориентированный на недопредставленных людей со знаниями в других языках программирования.
Посмотрите репозиторий Rustbridge
Стандарты сообщества
Мы стараемся для всех предоставить дружественное, безопасное и приветливое окружение
не зависимо от пола, сексуальной ориентации, инвалидности, этнической принадлежности,
религии или других личных особенностей. Наши
правила поведения устанавливают
стандарты поведения на всех форумах Rust.
Если вы чувствуете, что подвергаетесь преследованиям или притеснениям со стороны участника сообщества, пожалуйста, незамедлительно свяжитесь с
Rust Moderation Team. Будет ли это новичок или постоянный участник, мы постараемся сделать сообщество безопасным для вас.
Написать в Moderation Team
прочесть правила поведения
Прочесть руководство по модерации
Получить помощь!
Документация
Rust Forge (Документация для контрибьюторов)
Задать вопрос на пользовательском форуме
Язык
English (en-US)
Español (es)
Français (fr)
Italiano (it)
日本語 (ja)
Português (pt-BR)
Русский (ru)
Türkçe (tr)
简体中文 (zh-CN)
正體中文 (zh-TW)
Условия и политики
Правила поведения
Лицензии
Руководство по политике в отношении логотипов и СМИ
Отчёты об уязвимостях
Уведомление о конфиденциальности
Все политики
Социальные сети
Поддерживается Rust Team. Увидели опечатку? Исправьте здесь!
Ищете предыдущий сайт?
Начало работы - Язык программирования Rust
Rust
Установка
Изучить
Песочница
Инструменты
Управление
Сообщество
Блог
Язык
English (en-US)
Español (es)
Français (fr)
Italiano (it)
日本語 (ja)
Português (pt-BR)
Русский (ru)
Türkçe (tr)
简体中文 (zh-CN)
正體中文 (zh-TW)
Начало работы
Быстро настройте среду разработки Rust и напишите небольшое приложение!
Установить Rust
Вы можете попробовать Rust онлайн в Rust Playground без установки чего-либо на ваш компьютер.
Попробовать Rust без установки
Rustup: Установщик Rust и инструмент для управления версиями
Основным способом установки Rust, который используют люди, является Rustup - инструмент для установки и управления версиями Rust.
Кажется у вас запущена macOS, Linux или другая Unix-подобная ОС. Для загрузки Rustup и установки Rust, запустите следующее в вашем терминале и следуйте инструкциям на экране.
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
Похоже, вы работаете под управлением Windows. Чтобы начать использовать Rust, загрузите установщик, затем запустите программу и следуйте инструкциям на экране. Возможно, Вам потребуется установитьVisual Studio C++ Build tools при появлении соответствующего запроса. Если вы не работаете в Windows, смотрите "другие методы установки".
Загрузить rustup-init.exe (32-bit)
Загрузить rustup-init.exe (64-bit)
Windows Subsystem for Linux
Если вы используете Windows Subsystem for Linux, для установки Rust запустите следующее в вашем терминале и затем следуйте инструкциям на экране.
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
Rust запускается на Windows, Linux, macOS, FreeBSD и NetBSD. Если вы используете одну из этих платформ и видите это, то пожалуйста, сообщите о проблеме и следующих значениях:
navigator.platform:
MacIntel
navigator.appVersion:
5.0 (Macintosh)
Сообщить о проблеме
Если вы используете Unix, то для установки Rustзапустите в терминале следующую команду и следуйте инструкциям на экране.
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
Если у вас запущен Windows,скачайте и запустите rustup‑init.exe и затем следуйте инструкциям на экране.
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
Если у вас запущен Windows,скачайте и запустите rustup‑init.exe, а затем следуйте инструкциям на экране.
Обновлён ли Rust?
Rust обновляется достаточно часто. Если вы устанавливали Rustup некоторое время назад, есть вероятность что версия Rust устарела. Получите актуальную версию Rust, запустив команду rustup update.
Узнать больше о процессе установки
Cargo: Менеджер пакетов и инструмент сборки для Rust
При установке через Rustup, вы получаете последнюю стабильную версию пакетного менеджера и средства сборки Rust, известного, как Cargo. Cargo делает многие вещи:
собирает ваш проект с cargo build
запускает ваш проект с cargo run
тестирует ваш проект с cargo test
собирает документацию для вашего проекта с cargo doc
публикует библиотеку на crates.io с cargo publish
Чтобы удостовериться, что Rust и Cargo установлены, вы можете запустить в терминале следующую команду:
cargo --version
Читать книгу по cargo
Другие инструменты
Поддержка Rust есть во многих редакторах:
VS Code
Sublime Text
RustRover
Eclipse
Vim
Emacs
Visual Studio
Создание нового проекта
Давайте напишем небольшое приложение с нашим новым окружением разработчика. Чтобы начать, мы используем Cargo для создания нового проекта. Запустите в вашем терминале:
cargo new hello-rust
Эта команда создаст новую директорию, зовущуюся hello-rust со следующими файлами:
hello-rust
|- Cargo.toml
|- src
|- main.rs
Cargo.toml - это файл манифеста. Здесь хранятся метаданные вашего проекта, такие как описание.
В файле src/main.rs вы пишете код приложения.
cargo new создал для нас проект "Hello, world!". Для запуска этой программы мы перейдём в директорию, которая была создана, и запустим в терминале:
cargo run
Вы должны увидеть следующее:
$ cargo run
Compiling hello-rust v0.1.0 (/Users/ag_dubs/rust/hello-rust)
Finished dev [unoptimized + debuginfo] target(s) in 1.34s
Running `target/debug/hello-rust`
Hello, world!
Добавление зависимостей
Давайте добавим зависимость в наше приложение. Вы можете найти разного рода библиотеки на crates.io, реестре пакетов для Rust. В Rust мы обычно называем пакет "crates".
В этом проекте, мы используем пакет с именем ferris-says.
В нашем Cargo.toml файле мы добавим следующую информацию (которую мы получили со страницы пакета):
[dependencies]
ferris-says = "0.3.1"
Теперь мы можем запустить:
cargo build
...и Cargo установит наши зависимости.
Вы увидите, что эта команда создала новый файл, Cargo.lock. Этот файл представляет собой журнал точных версий зависимостей, которые мы используем локально.
Для использования нашей зависимости, мы можем открыть файл main.rs, удалить всё, что там есть (это просто ещё один пример) и добавить следующую строку:
use ferris_says::say;
Это строка означает, что мы теперь можем использовать функцию say, которую нам предоставил пакет ferris-says.
Небольшое приложение на Rust
Теперь давайте напишем небольшое приложение с нашей новой зависимостью. В файл main.rs добавьте следующий код:
use ferris_says::say; // from the previous step
use std::io::{stdout, BufWriter};
fn main() {
let stdout = stdout();
let message = String::from("Hello fellow Rustaceans!");
let width = message.chars().count();
let mut writer = BufWriter::new(stdout.lock());
say(&message, width, &mut writer).unwrap();
}
После того, как мы это сохраним, мы можем запустить наше приложение набрав:
cargo run
При условии, что всё пошло хорошо, вы должны увидеть, что ваше приложение вывело на экран следующее:
__________________________
< Hello fellow Rustaceans! >
--------------------------
\
\
_~^~^~_
\) /  o o  \ (/
'_   -   _'
/ '-----' \
Узнать больше!
Теперь вы Растацианин! Добро пожаловать! Мы так рады видеть вас. Когда вы будете готовы, перейдите на нашу страницу обучения, где вы можете найти множество книг, которые помогут вам продолжить ваше приключение в Rust.
узнать больше!
Кто этот краб, Ferris?
Ferris (Феррис) - это неофициальный талисман сообщества Rust. Многие программисты на Rust называют себя "Растациане", обыгрывая слово "crustacean".
Ferris - это имя, обыгрывающее прилагательное "ferrous" ("железистый"), обозначающее "содержащий железо". Поскольку Rust (один из переводов которого - "ржавчина") образуется на железе, название нашего талисмана выглядит забавным!
Вы можете найти больше изображений Ферриса на rustacean.net.
Получить помощь!
Документация
Rust Forge (Документация для контрибьюторов)
Задать вопрос на пользовательском форуме
Язык
English (en-US)
Español (es)
Français (fr)
Italiano (it)
日本語 (ja)
Português (pt-BR)
Русский (ru)
Türkçe (tr)
简体中文 (zh-CN)
正體中文 (zh-TW)
Условия и политики
Правила поведения
Лицензии
Руководство по политике в отношении логотипов и СМИ
Отчёты об уязвимостях
Уведомление о конфиденциальности
Все политики
Социальные сети
Поддерживается Rust Team. Увидели опечатку? Исправьте здесь!
Ищете предыдущий сайт?
Приложения CLI - Язык программирования Rust
Rust
Установка
Изучить
Песочница
Инструменты
Управление
Сообщество
Блог
Язык
English (en-US)
Español (es)
Français (fr)
Italiano (it)
日本語 (ja)
Português (pt-BR)
Русский (ru)
Türkçe (tr)
简体中文 (zh-CN)
正體中文 (zh-TW)
Приложения CLI
Почему Rust?
Надёжный и быстрый
Даже если вы просто пишете короткий одноразовый
скрипт, вы можете быть уверены, что он будет быстрым, легко тестируемым и даст
полезный вывод.
Гарантии Rust
Лёгкое распространение
Скомпилировано в один исполняемый файл — Вашим пользователям не нужна установленная среда выполнения или библиотеки.
Как доставить код Rust
Надёжная конфигурация
Лёгкая обработка конфигурационных файлов на разных платформах. Rust за вас разберётся с пространствами имён и форматами.
Начнём настройку
Руководства? Готово.
Создавайте справочные страницы для вашего приложения автоматически. Просто упакуйте сгенерированные файлы, и всё готово.
Узнайте, как
Входные данные, выходные данные
В дополнение к общению с людьми, Rust имеет отличные инструменты для общения с компьютерами.
Взаимодействие с компьютерами
Гибкое логирование
Легко добавить журналирование и ещё проще настроить его для разных целей и с разными стилями.
Логгируй, трассируй, понимай
Поддерживаемая кодовая база
Перехват ошибок
Что, если конфигурационный файл отсутствует или повреждён? Что, если значение одной из переменных среды окружения не установлено? Об этих случаях легко забыть! Но благодаря подходу к обработке ошибок и дизайну библиотек, Rust укажет на такие ситуации ещё до того, как вы запустите свою программу.
Обработка ошибок в Rust
Легко расширяемый в будущем
Rust позволяет вам быть гибким при организации кода. Начините с одного файла и, когда вам понадобится больше функций, реорганизуйте ваше приложение и будьте уверены, что вы ничего не нарушите.
Рефакторинг кода на Rust
Начнём!
Написание приложений командной строки - это отличный способ изучить Rust.
Определите ваши входные данные
use clap::Parser;
/// Read some lines of a file
#[derive(Debug, Parser)]
struct Cli {
/// Input file to read
file: String,
/// Number of lines to read
#[structopt(short = 'n')]
num: usize,
}
Напишите Ваш инструмент
use std::{error::Error, fs::read_to_string};
fn main() -> Result<(), Box> {
let args = Cli::parse();
read_to_string(&args.file)?
.lines()
.take(args.num)
.for_each(|line| println!("{}", line));
Ok(())
}
Узнайте больше с CLI book
Промышленное использование
Одной из причин, по которой нам понравился Rust, была экосистема crates.io. [...] Здесь вы можете найти много действительно хороших готовых реализаций, для создания замечательных интерфейсов командной строки.
– Armin Ronacher,
Rust в Sentry – PolyConf 2017
Я не жалею о том, что живу в этой кодовой базе. […] Это было своего рода дополнительным бонусом для меня: использование Rust для создания CLI или консольных инструментов. Он очень хорош при компиляции под разные целевые системы.
– Fletcher Nichol,
Использование Rust на основном сервере – RustFest Kyiv
Получить помощь!
Документация
Rust Forge (Документация для контрибьюторов)
Задать вопрос на пользовательском форуме
Язык
English (en-US)
Español (es)
Français (fr)
Italiano (it)
日本語 (ja)
Português (pt-BR)
Русский (ru)
Türkçe (tr)
简体中文 (zh-CN)
正體中文 (zh-TW)
Условия и политики
Правила поведения
Лицензии
Руководство по политике в отношении логотипов и СМИ
Отчёты об уязвимостях
Уведомление о конфиденциальности
Все политики
Социальные сети
Поддерживается Rust Team. Увидели опечатку? Исправьте здесь!
Ищете предыдущий сайт?
WebAssembly - Язык программирования Rust
Rust
Установка
Изучить
Песочница
Инструменты
Управление
Сообщество
Блог
Язык
English (en-US)
Español (es)
Français (fr)
Italiano (it)
日本語 (ja)
Português (pt-BR)
Русский (ru)
Türkçe (tr)
简体中文 (zh-CN)
正體中文 (zh-TW)
Web­Assembly
Почему Rust?
Предсказуемая производительность
Никаких непредсказуемых остановок для сбора мусора. Никаких снижений производительности JIT-компилятора. Только низкоуровневый контроль в паре с высокоуровневой эргономикой.
Маленький размер кода
Малый размер кода означает быструю загрузку страницы. Сгенерированный Rust .wasm не содержит ненужных вещей, например, сборщика мусора. Дополнительные оптимизации и техника включения гарантированно исполняемого кода (tree shaking) удаляют мёртвый код.
Современные удобства
Живая экосистема библиотек, которая поможет вам взяться за дело. Выразительные абстракции с нулевой стоимостью. И приветливое сообщество, которое поможет вам учиться.
Начнём!
Узнайте больше о быстрой, безопасной и открытой виртуальной машине, зовущейся WebAssembly, и ознакомьтесь с её стандартом.
Узнать больше
Узнайте как собрать, отладить, профилировать и развёртывать WebAssembly приложения с помощью Rust!
Читать книгу
Узнать больше о WebAssembly на Mozilla Developer Network.
Узнать больше
Хорошо работает с JavaScript
Дополнение, а не замена
Мечта WebAssembly — не убить JavaScript, а работать вместе с ним, помогая в обработке тяжёлых или низкоуровневых задач — задач, которые выигрывают от подхода Rust к производительности.
Работает с привычным набором инструментов
Публикуйте пакеты WebAssembly, созданные с Rust, в реестр пакетов, такой как npm. Упаковывайте и отправляйте их с webpack, Parcel и подобными. Поддерживайте их с помощью таких инструментов, как npm audit и Greenkeeper.
Бесшовная совместимость
Автоматически создавайте кодовые привязки между Rust, WebAssembly и JavaScript API. Получите преимущества таких библиотек, как web-sys, предоставляющих предварительно упакованные привязки для всех web-платформ.
Промышленное использование
Мы можем скомпилировать Rust в WASM и вызывать его из Serverless функций, вплетённых в ткань Интернета. Это потрясающе и я с нетерпением жду этого.
– Steven Pack, Serverless Rust with Cloudflare Workers
Реализация библиотеки для source-map на JavaScript превратилась в сложный и медленный код и мы переписали его на Rust. Rust не требует от нас сделать выбор в пользу ясности выражения или производительности во время исполнения.
– Nick Fitzgerald, Oxidizing Source Maps with Rust and WebAssembly
Свойства [Rust] позволяют легко встроить кодек DivANS в web-страницу с помощью WASM, как показано выше.
– Daniel Reiter Horn и Jongmin Baek, Building Better Compression Together with DivANS
Получить помощь!
Документация
Rust Forge (Документация для контрибьюторов)
Задать вопрос на пользовательском форуме
Язык
English (en-US)
Español (es)
Français (fr)
Italiano (it)
日本語 (ja)
Português (pt-BR)
Русский (ru)
Türkçe (tr)
简体中文 (zh-CN)
正體中文 (zh-TW)
Условия и политики
Правила поведения
Лицензии
Руководство по политике в отношении логотипов и СМИ
Отчёты об уязвимостях
Уведомление о конфиденциальности
Все политики
Социальные сети
Поддерживается Rust Team. Увидели опечатку? Исправьте здесь!
Ищете предыдущий сайт?
Сетевое взаимодействие - Язык программирования Rust
Rust
Установка
Изучить
Песочница
Инструменты
Управление
Сообщество
Блог
Язык
English (en-US)
Español (es)
Français (fr)
Italiano (it)
日本語 (ja)
Português (pt-BR)
Русский (ru)
Türkçe (tr)
简体中文 (zh-CN)
正體中文 (zh-TW)
Сетевое взаимодействие
Почему Rust?
Низкая стоимость
Возьмите под контроль использование ресурсов чтобы минимизировать использование памяти и процессора. Получите помощь от компилятора, чтобы быть уверенным, что делаете всё правильно. И делайте это с продуктивной и приятной в использовании экосистемой.
Безопасный и надёжный
Мощная проверка типов Rust предотвращает целые классы ошибок.
Убедитесь, что вы точно знаете, когда и где состояние бывает общим и изменяющимся.
Получите помощь в отлове точек отказа ещё до развёртывания.
Конкурентность и масштабируемость
Используйте подход параллельного программирования, который наилучшим образом соответствует вашим потребностям. Rust предотвращает одновременное использование состояний между потоками или задачами. Это позволяет без страха достичь максимальной производительности.
Начнём!
Rust имеет растущую экосистему простых в использовании библиотек для web. Вот только два примера:
Отправка JSON
// This will POST a body of
//     `{"lang": "rust", "body": "json"}`
#[derive(Serialize)]
struct Body<'a> {
lang: &'a str,
body: &'a str,
}
let client = reqwest::Client::new();
let res = client.post("http://httpbin.org/post")
.json(&Body {
lang: "rust",
body: "json",
})
.send()?;
Узнать больше о reqwest
Обработка POST с JSON
#[derive(Deserialize)]
struct Task { name: String, completed: bool }
#[post("/", data = "<task>")]
fn new(task: Json<Task>) -> Flash<Redirect> {
if task.name.is_empty() {
Flash::error(Redirect::to("/"),
"Cannot be empty.")
} else {
Flash::success(Redirect::to("/"),
"Task added.")
}
}
Узнать больше о Rocket
Промышленное использование
Перенос нашей инфраструктуры Push-соединений на Rust позволил нам легче поддерживать кодовую базу и сфокусироваться на корректности и высокой производительности. В настоящее время мы одновременно обрабатываем до 20 миллионов сетевых подключений в часы пик с серверами на Rust.
– Benjamin Bangert, Staff Engineer, Mozilla
Rust является основой технологической дорожной карты Linkerd. Его система типов позволяет нам создавать модульные, тестируемые компонуемые единицы без ущерба для производительности во время исполнения. Однако самое удивительное то, что система проверки заимствований и времён жизни, позволяет нам избежать больших утечек ресурсов. После 2 лет, я не могут представить использование для работы какого-либо другого языка.
– Oliver Gould, CTO, Buoyant
Получить помощь!
Документация
Rust Forge (Документация для контрибьюторов)
Задать вопрос на пользовательском форуме
Язык
English (en-US)
Español (es)
Français (fr)
Italiano (it)
日本語 (ja)
Português (pt-BR)
Русский (ru)
Türkçe (tr)
简体中文 (zh-CN)
正體中文 (zh-TW)
Условия и политики
Правила поведения
Лицензии
Руководство по политике в отношении логотипов и СМИ
Отчёты об уязвимостях
Уведомление о конфиденциальности
Все политики
Социальные сети
Поддерживается Rust Team. Увидели опечатку? Исправьте здесь!
Ищете предыдущий сайт?
Встраиваемые устройства - Язык программирования Rust
Rust
Установка
Изучить
Песочница
Инструменты
Управление
Сообщество
Блог
Язык
English (en-US)
Español (es)
Français (fr)
Italiano (it)
日本語 (ja)
Português (pt-BR)
Русский (ru)
Türkçe (tr)
简体中文 (zh-CN)
正體中文 (zh-TW)
Встраиваемые устройства
Почему Rust?
Мощный статический анализ
Принудительная настройка контактов и периферийных устройств во время компиляции. Гарантия того, что ресурсы не будут использоваться не предназначенными частями приложения.
Узнайте больше
Гибкая память
Динамическое распределение памяти не является обязательным. Используйте глобальный распределитель и динамические структуры данных. Или вообще исключить кучу и статически распределить всё.
Узнайте больше
Написание параллельного кода без страха
Rust делает невозможным случайное разделение состояния между потоками. Используйте любые подходы к параллелизму, которые вам нравятся, и вы всё равно получите строгие гарантии Rust.
Узнайте больше
Совместимость
Интегрируйте Rust в вашу существующую кодовую базу на C или используйте существующий SDK для написания приложения на Rust.
Узнайте больше
Переносимость
Один раз напишите библиотеку или драйвер и используйте его с разными системами начиная от очень маленьких микроконтроллеров, до мощных интегрированных плат.
Узнайте больше
Движимый сообществом
В рамках open source проекта Rust, поддержка встраиваемых систем движется, при поддержке коммерческих партнёров, лучшим в своём классе open source сообществом.
Узнайте больше
История успеха
"Я был так взволнован, когда я наткнулся на Rust от Mozilla. Rust - новый язык программирования с лозунгом «безопасный, быстрый, параллельный - выбери три». Ему также гарантировано будущее с сильным и преданным сообществом пользователей."
– Jonathan Pallant, Senior Consultant, Cambridge Consultants
Узнать больше
Безопасное будущее с Rust из Cambridge Consultants на Vimeo.
Начнём!
Книга Discovery
Изучите встроенную разработку с нуля используя Rust!
Читать
Книга Embedded Rust
Уже знакомы с разработкой встраиваемых систем? Присоединяйтесь к Rust и начинайте получать выгоду.
Читать
Embedonomicon
Посмотрите под капот фундаментальных embedded библиотек.
Читать
Больше документации
Промышленное использование
Мы в Sensirion недавно использовали Rust для создания демонстрации Particulate Matter Sensor. Благодаря простой кросс-компиляции и доступности большого количества высококачественных пакетов на crates.io мы быстро получили быстрый и надёжный демонстратор.
– Raphael Nestler, Software Engineer, Sensirion
Мы в Airborne Engineering Ltd. недавно использовали Rust чтобы написать внутреннюю систему сбора данных на Ethernet загрузчике, blethrs. Rust является перспективным языком и мы будем рады использовать его в наших будущих проектах, встраиваемых и не только.
– Dr. Adam Greig, Instrumentation Engineer, Airborne Engineering Ltd.
[Rust] позволил нам доставлять программное обеспечение быстрее и более корректно, чем мы предполагали. Благодаря Rust мы получили гарантии безопасности памяти, в то время как другие преимущества языка с нулевыми издержками и сложной системой типов помогают нам разрабатывать поддерживаемое ПО. Rust делает счастливыми как наших клиентов, так и наших инженеров.
– Marc Brinkmann, CEO, 49nord
Мы думаем, что это действительно круто, что мы можем использовать хороший современный язык в области встраиваемых устройств где обычно нет альтернатив C/C++
– Aleksei Arbuzov, Senior Software Engineer, Terminal Technologies
Получить помощь!
Документация
Rust Forge (Документация для контрибьюторов)
Задать вопрос на пользовательском форуме
Язык
English (en-US)
Español (es)
Français (fr)
Italiano (it)
日本語 (ja)
Português (pt-BR)
Русский (ru)
Türkçe (tr)
简体中文 (zh-CN)
正體中文 (zh-TW)
Условия и политики
Правила поведения
Лицензии
Руководство по политике в отношении логотипов и СМИ
Отчёты об уязвимостях
Уведомление о конфиденциальности
Все политики
Социальные сети
Поддерживается Rust Team. Увидели опечатку? Исправьте здесь!
Ищете предыдущий сайт?
Промышленное использование - Язык программирования Rust
Rust
Установка
Изучить
Песочница
Инструменты
Управление
Сообщество
Блог
Язык
English (en-US)
Español (es)
Français (fr)
Italiano (it)
日本語 (ja)
Português (pt-BR)
Русский (ru)
Türkçe (tr)
简体中文 (zh-CN)
正體中文 (zh-TW)
Промышленное использование
Публикации
npm
Прочитайте, как npm, которые управляют одноимённым реестром пакетов JavaScript, нашли Rust и сделали развёртывания скучными.
Читать публикации
Tilde
Узнайте как Rust помог Tilde, создателям Skylight, использовать минимальное количество ресурсов для обеспечения многофункционального мониторинга производительности приложений клиентов.
Читать публикации
Особенности
Dropbox
Несколько компонентов базовой системы хранения файлов Dropbox были написаны на Rust как один из этапов более крупного проекта, направленного на повышение эффективности центра обработки данных. В настоящее время он используется всеми хранилищами Dropbox, обслуживая более 500 миллионов пользователей.
Читать далее
Yelp
Yelp разработали фреймворк на Rust для A/B тестирования в реальном времени. Он используется на всех сайтах и приложениях Yelp, а субъекты экспериментов варьируются от UX до внутренней инфраструктуры. Rust был выбран потому что он такой же быстрый, как C (дешёвый в эксплуатации), и безопаснее, чем С (дешёвый в поддержке).
Смотреть видео
Ваша компания использует Rust? Рассмотрите возможность поделиться своим опытом с нами!
Свяжитесь с Leadership Council
Хотите узнать больше о тех, кто использует Rust в производстве?
Посмотрите страницу использующих
Посмотрите, как компании используют инструменты в конкретных областях разработки!
Командная строка
Узнать больше
WebAssembly
Узнать больше
Сетевое программирование
Узнать больше
Встраиваемые системы
Узнать больше
Поддержка Rust
Заинтересованы в спонсировании разработки Rust? Или хотите устроить конференцию? Можешь обратиться к нам.
Связаться с Leadership Council
Лицензия
Rust имеет двойную лицензию: Apache License Version 2.0 и MIT, что делает его пригодным для всех видов проектов.
Политики: Лицензия
Получить помощь!
Документация
Rust Forge (Документация для контрибьюторов)
Задать вопрос на пользовательском форуме
Язык
English (en-US)
Español (es)
Français (fr)
Italiano (it)
日本語 (ja)
Português (pt-BR)
Русский (ru)
Türkçe (tr)
简体中文 (zh-CN)
正體中文 (zh-TW)
Условия и политики
Правила поведения
Лицензии
Руководство по политике в отношении логотипов и СМИ
Отчёты об уязвимостях
Уведомление о конфиденциальности
Все политики
Социальные сети
Поддерживается Rust Team. Увидели опечатку? Исправьте здесь!
Ищете предыдущий сайт?
Промышленное использование - Язык программирования Rust
Rust
Установка
Изучить
Песочница
Инструменты
Управление
Сообщество
Блог
Язык
English (en-US)
Español (es)
Français (fr)
Italiano (it)
日本語 (ja)
Português (pt-BR)
Русский (ru)
Türkçe (tr)
简体中文 (zh-CN)
正體中文 (zh-TW)
Промышленное использование
Публикации
npm
Прочитайте, как npm, которые управляют одноимённым реестром пакетов JavaScript, нашли Rust и сделали развёртывания скучными.
Читать публикации
Tilde
Узнайте как Rust помог Tilde, создателям Skylight, использовать минимальное количество ресурсов для обеспечения многофункционального мониторинга производительности приложений клиентов.
Читать публикации
Особенности
Dropbox
Несколько компонентов базовой системы хранения файлов Dropbox были написаны на Rust как один из этапов более крупного проекта, направленного на повышение эффективности центра обработки данных. В настоящее время он используется всеми хранилищами Dropbox, обслуживая более 500 миллионов пользователей.
Читать далее
Yelp
Yelp разработали фреймворк на Rust для A/B тестирования в реальном времени. Он используется на всех сайтах и приложениях Yelp, а субъекты экспериментов варьируются от UX до внутренней инфраструктуры. Rust был выбран потому что он такой же быстрый, как C (дешёвый в эксплуатации), и безопаснее, чем С (дешёвый в поддержке).
Смотреть видео
Ваша компания использует Rust? Рассмотрите возможность поделиться своим опытом с нами!
Свяжитесь с Leadership Council
Хотите узнать больше о тех, кто использует Rust в производстве?
Посмотрите страницу использующих
Посмотрите, как компании используют инструменты в конкретных областях разработки!
Командная строка
Узнать больше
WebAssembly
Узнать больше
Сетевое программирование
Узнать больше
Встраиваемые системы
Узнать больше
Поддержка Rust
Заинтересованы в спонсировании разработки Rust? Или хотите устроить конференцию? Можешь обратиться к нам.
Связаться с Leadership Council
Лицензия
Rust имеет двойную лицензию: Apache License Version 2.0 и MIT, что делает его пригодным для всех видов проектов.
Политики: Лицензия
Получить помощь!
Документация
Rust Forge (Документация для контрибьюторов)
Задать вопрос на пользовательском форуме
Язык
English (en-US)
Español (es)
Français (fr)
Italiano (it)
日本語 (ja)
Português (pt-BR)
Русский (ru)
Türkçe (tr)
简体中文 (zh-CN)
正體中文 (zh-TW)
Условия и политики
Правила поведения
Лицензии
Руководство по политике в отношении логотипов и СМИ
Отчёты об уязвимостях
Уведомление о конфиденциальности
Все политики
Социальные сети
Поддерживается Rust Team. Увидели опечатку? Исправьте здесь!
Ищете предыдущий сайт?
Изучить Rust - Язык программирования Rust
Rust
Установка
Изучить
Песочница
Инструменты
Управление
Сообщество
Блог
Язык
English (en-US)
Español (es)
Français (fr)
Italiano (it)
日本語 (ja)
Português (pt-BR)
Русский (ru)
Türkçe (tr)
简体中文 (zh-CN)
正體中文 (zh-TW)
Изучить Rust
С чего начать?
"The Rust Programming Language", ласково называемая "книгой", даст вам обзор языка начиная с базовых принципов. По ходу чтения вы создадите несколько проектов и к концу изучения получите твёрдое понимание языка.
Читать книгу!
Другой вариант, Rustlings, поможет вам в установке и настройке инструментов Rust, и обучит вас основам чтения и написания кода на Rust. Это альтернатива книге "Rust на примерах", которая работает с вашим собственным окружением.
Пройдите курс Rustlings!
Если чтение сотен страниц о языке — не ваш стиль, то вам стоит взглянуть на "Rust на примерах" ("Rust By Example", RBE). Пока "Книга" большим количеством слов рассуждает о коде, RBE показывает куски кода и сводит рассуждения к минимуму. Также она содержит упражнения!
Перейти в Rust by Example!
Совершенствуйтесь с Rust
Прочитайте основную документацию
Вся документация также доступна локально. Команда rustup doc откроет её в вашем браузере даже без сети!
Стандартная библиотека
Полное руководство по API стандартной библиотеки.
Руководство по редакциям языка
Руководство по редакциям Rust.
Книга по Cargo
Книга о пакетном менеджере и системе сборки Rust.
Книга по rustdoc
Узнайте как создать удивительную документацию для вашего проекта.
Книга по rustc
Познакомьтесь с опциями, доступными в компиляторе Rust.
Руководство по ошибкам компилятора
Подробные объяснения ошибок, которые вы можете получить от компилятора.
Развивайте свои навыки в прикладной сфере
Книга о консольных приложениях
Изучите как писать эффективные консольные приложения на Rust.
Книга по WebAssembly
Используйте Rust для создания нативных браузерных библиотек с помощью WebAssembly.
Книга Embedded
Станьте опытным разработчиком под микроконтроллеры и другие встраиваемые системы с Rust.
Мастер Rust
Интересно узнать о самых тёмных уголках языка? Здесь вы можете докопаться до мелочей:
Reference не является формальной спецификацией, но она более детализирована и комплексна, чем книга.
Читать Reference
Rustonomicon - это ваш путеводитель в тёмное искусство небезопасного Rust. Иногда его называют "’nomicon".
Читать ’nomicon
Unstable Book содержит документацию о нестабильных возможностях, которые вы можете использовать только в ночной версии Rust.
Читать Unstable Book
Получить помощь!
Документация
Rust Forge (Документация для контрибьюторов)
Задать вопрос на пользовательском форуме
Язык
English (en-US)
Español (es)
Français (fr)
Italiano (it)
日本語 (ja)
Português (pt-BR)
Русский (ru)
Türkçe (tr)
简体中文 (zh-CN)
正體中文 (zh-TW)
Условия и политики
Правила поведения
Лицензии
Руководство по политике в отношении логотипов и СМИ
Отчёты об уязвимостях
Уведомление о конфиденциальности
Все политики
Социальные сети
Поддерживается Rust Team. Увидели опечатку? Исправьте здесь!
Ищете предыдущий сайт?
Правила поведения - Язык программирования Rust
Rust
Установка
Изучить
Песочница
Инструменты
Управление
Сообщество
Блог
Язык
English (en-US)
Español (es)
Français (fr)
Italiano (it)
日本語 (ja)
Português (pt-BR)
Русский (ru)
Türkçe (tr)
简体中文 (zh-CN)
正體中文 (zh-TW)
Правила поведения
Эта политика может быть переведена участниками сообщества Rust. Если имеются конфликты между переводом и оригиналом, применяться должны положения из оригинала.
Поведение
Мы стремимся обеспечить дружественную, безопасную и гостеприимную среду для всех, независимо от уровня опыта, гендерной идентичности и самовыражения, сексуальной ориентации, инвалидности, внешнего вида, размера тела, расы, этнической принадлежности, возраста, религии, национальности или других подобных характеристик.
Пожалуйста, избегайте использования откровенно сексуальных псевдонимов или других псевдонимов, которые могут для всех ухудшить дружескую, безопасную и гостеприимную среду.
Пожалуйста, будьте добры и вежливы. Не нужно быть грубым.
Уважайте то, что люди расходятся во мнениях и что каждый выбор дизайна или реализации влечёт за собой компромисс и многочисленные затраты. Правильный ответ редко бывает.
Пожалуйста, сведите к минимуму неструктурированную критику. Если у вас есть идеи, с которыми вы хотите поэкспериментировать, сделайте форк и посмотрите, как они работают.
Мы исключим вас из взаимодействия, если вы оскорбляете, унижаете или оскорбляете кого-либо. Это не приветствуется. Мы понимаем термин «домогательства», как определяется в Citizen Code of Conduct. Если у вас нет ясности относительно того, что может быть включено в эту концепцию, пожалуйста, прочитайте их определение. В частности, мы не терпим поведения, которое исключает людей из социально маргинализированных групп.
Частное домогательство также недопустимо. Независимо от того, кто вы, если вы чувствуете, что вас кто-то беспокоил, или кто-то беспокоит вас или кто-то чувствует себя неудобно, немедленно свяжитесь с одним из сотрудников канала или с         Команда модераторов Rust
. Неважно, являетесь ли вы постоянным участником или новичком, мы заботимся о том, чтобы сделать это сообщество безопасным для вас, и мы вас поддержим.
Точно так же не приветствуются спам, троллинг, флейм, травлю или другие виды кражи внимания.
Написать в Moderation Team
Модерация
Это политика соблюдения стандартов поведения нашего сообщества. Если вы чувствуете, что тред нуждается в модерации, свяжитесь с Команда модераторов Rust.
Замечания, нарушающие стандарты поведения Rust, в том числе ненавистные, оскорбительные, репрессивные или исключительные замечания, не допускаются. (Проклятия допускаются, но они никогда не должны быть нацелены на другого пользователя и никогда не должны быть ненавистным.)
Замечания, которые модераторы считают неуместными, независимо от того, указаны они в кодексе поведения или нет, также не допускаются.
Модераторы сначала ответят на такие замечания предупреждением.
Если предупреждение не будет услышано, пользователь будет «выгнан», то есть выгнан из канала связи чтобы остудил свой пыл.
Если пользователь вернётся и продолжит создавать проблемы, он будет заблокирован, то есть исключён на неопределённый срок.
Модераторы могут по своему усмотрению отменить запрет пользователя, если это было первым нарушением, и принести обиженной стороне искренние извинения.
Если модератор кого-то запрещает, и вы считаете, что это неоправданно, обратитесь к этому модератору или другому модератору, в частном порядке. Жалобы на запреты в канале не допускаются.
Модераторы придерживаются более высоких стандартов, чем другие участники сообщества. Если модератор создаёт неуместную ситуацию, он должен ожидать меньшую свободу действий, чем другие.
В сообществе Rust мы стремимся сделать ещё один шаг, чтобы заботиться друг о друге. Не стремитесь быть технически безупречными, старайтесь быть самим собой. В частности, избегайте заигрывать с оскорбительными или деликатными вопросами, особенно если они не по теме; это слишком часто приводит к ненужным дракам, обидным чувствам и подрыву доверия; хуже того, это может полностью оттолкнуть людей от сообщества.
И если кто-то не согласен с тем, что вы сказали или сделали, не поддавайтесь желанию защищаться. Просто прекратите делать то, на что они жаловались, и извинитесь. Даже если вы чувствуете, что вас неправильно истолковали или несправедливо обвинили, велика вероятность того, что вы могли лучше донести информацию - помните, что вы несёте ответственность за то, чтобы ваши друзья-Растациане были довольны. Все хотят ладить, и мы все здесь, в первую очередь, потому что мы хотим поговорить о крутых технологиях. Вы обнаружите, что люди будут стремиться к добрым намерениям и прощать, если вы заслужили их доверие.
Политики принудительного исполнения, перечисленные выше, распространяются на все официальные площадки, включая каналы Discord (https://discord.gg/rust-lang); GitHub репозитории организаций rust-lang, rust-lang-nursery и rust-lang-deprecated и все форумы rust-lang.org (users.rust-lang.org, internals.rust-lang.org). Для других проектов, принимающих Кодекс поведения Rust, пожалуйста, свяжитесь с разработчиками этих проектов для обеспечения исполнения. Если вы хотите использовать этот кодекс поведения для своего собственного проекта, рассмотрите возможность явного упоминания вашей политики модерации или создания копии с вашей собственной политикой модерации, чтобы избежать путаницы.
Адаптировано из Node.js Policy on Trolling, а также из Contributor Covenant v1.3.0.
Получить помощь!
Документация
Rust Forge (Документация для контрибьюторов)
Задать вопрос на пользовательском форуме
Язык
English (en-US)
Español (es)
Français (fr)
Italiano (it)
日本語 (ja)
Português (pt-BR)
Русский (ru)
Türkçe (tr)
简体中文 (zh-CN)
正體中文 (zh-TW)
Условия и политики
Правила поведения
Лицензии
Руководство по политике в отношении логотипов и СМИ
Отчёты об уязвимостях
Уведомление о конфиденциальности
Все политики
Социальные сети
Поддерживается Rust Team. Увидели опечатку? Исправьте здесь!
Ищете предыдущий сайт?
Лицензии - Язык программирования Rust
Rust
Установка
Изучить
Песочница
Инструменты
Управление
Сообщество
Блог
Язык
English (en-US)
Español (es)
Français (fr)
Italiano (it)
日本語 (ja)
Português (pt-BR)
Русский (ru)
Türkçe (tr)
简体中文 (zh-CN)
正體中文 (zh-TW)
Лицензии
Эта политика может быть переведена участниками сообщества Rust. Если имеются конфликты между переводом и оригиналом, применяться должны положения из оригинала.
Лицензия
Язык программирования Rust и все другие официальные проекты, включая этот сайт, как правило имеют двойную лицензию:
Apache License, Version 2.0
MIT license
Конкретную информацию о лицензии для каждого проекта можно найти в его репозитории на Github.
На сторонние логотипы могут распространяться авторские права и товарные знаки третьих лиц, и они не доступны с той же лицензией, как остальная часть сайта.
Если у вас есть какие-либо вопросы или проблемы по поводу лицензирования Rust и других проектов, ассоциированных с ним, пожалуйста обратитесь в Rust Leadership Council.
Написать в Leadership Council
Атрибуция
Иконки созданы Freepik с www.flaticon.com, лицензированы CC-3.0-BY
Получить помощь!
Документация
Rust Forge (Документация для контрибьюторов)
Задать вопрос на пользовательском форуме
Язык
English (en-US)
Español (es)
Français (fr)
Italiano (it)
日本語 (ja)
Português (pt-BR)
Русский (ru)
Türkçe (tr)
简体中文 (zh-CN)
正體中文 (zh-TW)
Условия и политики
Правила поведения
Лицензии
Руководство по политике в отношении логотипов и СМИ
Отчёты об уязвимостях
Уведомление о конфиденциальности
Все политики
Социальные сети
Поддерживается Rust Team. Увидели опечатку? Исправьте здесь!
Ищете предыдущий сайт?
Политика безопасности - Язык программирования Rust
Rust
Установка
Изучить
Песочница
Инструменты
Управление
Сообщество
Блог
Язык
English (en-US)
Español (es)
Français (fr)
Italiano (it)
日本語 (ja)
Português (pt-BR)
Русский (ru)
Türkçe (tr)
简体中文 (zh-CN)
正體中文 (zh-TW)
Политика безопасности
Эта политика может быть переведена участниками сообщества Rust. Если имеются конфликты между переводом и оригиналом, применяться должны положения из оригинала.
Информирование
Связаться с security@rust-lang.org
Safety is one of the core principles of Rust, and to that end, we would like to ensure that Rust has a secure implementation. Thank you for taking the time to responsibly disclose any issues you find.
All security bugs in the Rust distribution should be reported by email to security@rust-lang.org. This list is delivered to a small security team. Your email will be acknowledged within 24 hours, and you’ll receive a more detailed response to your email within 48 hours indicating the next steps in handling your report. If you would like, you can encrypt your report using our public key. This key is also On MIT’s keyserver and reproduced below.
This email address receives a large amount of spam, so be sure to use a descriptive subject line to avoid having your report be missed. After the initial reply to your report, the security team will endeavor to keep you informed of the progress being made towards a fix and full announcement. As recommended by RFPolicy, these updates will be sent at least every five days. In reality, this is more likely to be every 24-48 hours.
If you have not received a reply to your email within 48 hours, or have not heard from the security team for the past five days, there are a few steps you can take (in order):
Contact both the security coordinators directly:
Josh Stone
Pietro Albini
Post on the internals forums
Please note that the discussion forums are public areas. When escalating in these venues, please do not discuss your issue. Simply say that you’re trying to get a hold of someone from the security team.
Связаться с security@rust-lang.org
Политика раскрытия информации
При обработке отчётов безопасности выделяется 5 этапов:
Отчёт о безопасности получен и ему назначен основной обработчик. Этот человек будет координировать процесс исправления и выпуска.
Проблема подтверждена и определён список всех уязвимых версий.
Код проверяется на наличие потенциальных подобных проблем.
Исправления подготовлены для всех выпусков, которые всё ещё обслуживаются. Эти исправления пока что не доступны общественности, а скорее хранятся локально в ожидании объявления.
В день эмбарго в список рассылки по вопросам безопасности Rust отправляется копия объявления. Изменения передаются в общедоступный репозиторий, а новые сборки развёртываются на rust-lang.org. В течение 6 часов с момента получения списка рассылки, копия рекомендации будет опубликована в блоге Rust.
Этот процесс может занять некоторое время, особенно когда требуется координация с сопровождающими других проектов. Будут приложены все усилия для своевременного устранения ошибки, однако важно, чтобы мы следовали описанному выше процессу выпуска, чтобы гарантировать, что раскрытие будет обработано согласованным образом.
Получение обновлений безопасности
Лучший способ получать все объявления о безопасности - это подписаться на список рассылки Rust объявлений о безопасности (альтернативно: отправка электронного письма на адрес rustlang-security-announcements+subscribe@googlegroups.com). В списке рассылки очень низкий трафик, и он получает публичные уведомления в момент снятия эмбарго.
Мы объявим об уязвимостях за 72 часа до отмены эмбарго на distros@openwall, чтобы дистрибутивы Linux могли обновлять свои пакеты.
PGP ключ в текстовом формате
-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: GnuPG v1
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
u05l
=SPB7
-----END PGP PUBLIC KEY BLOCK-----
Получить помощь!
Документация
Rust Forge (Документация для контрибьюторов)
Задать вопрос на пользовательском форуме
Язык
English (en-US)
Español (es)
Français (fr)
Italiano (it)
日本語 (ja)
Português (pt-BR)
Русский (ru)
Türkçe (tr)
简体中文 (zh-CN)
正體中文 (zh-TW)
Условия и политики
Правила поведения
Лицензии
Руководство по политике в отношении логотипов и СМИ
Отчёты об уязвимостях
Уведомление о конфиденциальности
Все политики
Социальные сети
Поддерживается Rust Team. Увидели опечатку? Исправьте здесь!
Ищете предыдущий сайт?
Политики - Язык программирования Rust
Rust
Установка
Изучить
Песочница
Инструменты
Управление
Сообщество
Блог
Язык
English (en-US)
Español (es)
Français (fr)
Italiano (it)
日本語 (ja)
Português (pt-BR)
Русский (ru)
Türkçe (tr)
简体中文 (zh-CN)
正體中文 (zh-TW)
Политики
Эта страница ссылается на полный набор политик Rust.
Правила поведения
Лицензии
Руководство по политике в отношении логотипов и СМИ
Отчёты об уязвимостях
Уведомление о конфиденциальности
Не нашли того, что искали? Есть вопросы? Свяжитесь с нами!
Связаться с Rust Leadership Council
Получить помощь!
Документация
Rust Forge (Документация для контрибьюторов)
Задать вопрос на пользовательском форуме
Язык
English (en-US)
Español (es)
Français (fr)
Italiano (it)
日本語 (ja)
Português (pt-BR)
Русский (ru)
Türkçe (tr)
简体中文 (zh-CN)
正體中文 (zh-TW)
Условия и политики
Правила поведения
Лицензии
Руководство по политике в отношении логотипов и СМИ
Отчёты об уязвимостях
Уведомление о конфиденциальности
Все политики
Социальные сети
Поддерживается Rust Team. Увидели опечатку? Исправьте здесь!
Ищете предыдущий сайт?
